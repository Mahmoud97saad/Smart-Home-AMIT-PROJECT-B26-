
AMIT Project Microcontroller 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000007be  00000852  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000aa  008000aa  0000089c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001900  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a10  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbf  00000000  00000000  00002db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00003978  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e9  00000000  00000000  00003c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3d  00000000  00000000  00004285  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004dc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3b       	cpi	r26, 0xB6	; 182
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8a 02 	call	0x514	; 0x514 <main>
  8a:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Buzzer_Init>:

#include "Buzzer.h"

void Buzzer_Init(void)
{
	DIO_SetPinDir(Buzzer_PORT , Buzzer_PIN , DIO_PIN_OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
  9c:	08 95       	ret

0000009e <Buzzer_Start>:
}

void Buzzer_Start(void)
{
	DIO_SetPinVal(Buzzer_PORT , Buzzer_PIN , DIO_PIN_HIGH);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	63 e0       	ldi	r22, 0x03	; 3
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
  a8:	08 95       	ret

000000aa <Buzzer_Stop>:
}

void Buzzer_Stop(void)
{
	DIO_SetPinVal(Buzzer_PORT , Buzzer_PIN , DIO_PIN_LOW);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	63 e0       	ldi	r22, 0x03	; 3
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
  b4:	08 95       	ret

000000b6 <Buzzer_Buzz_NUM_Times>:

}

void Buzzer_Buzz_NUM_Times(void) 
{
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	uint8 data = 0;
	uint8 STATE_Buzzer = 0;
  bc:	80 e0       	ldi	r24, 0x00	; 0

}

void Buzzer_Buzz_NUM_Times(void) 
{
	uint8 data = 0;
  be:	c0 e0       	ldi	r28, 0x00	; 0
}
					
					else if (STATE_Buzzer == 0)
{
						Buzzer_Stop();
						STATE_Buzzer = 1;
  c0:	d1 e0       	ldi	r29, 0x01	; 1
		while ( data <= Num_Buzz )
{
					if ( STATE_Buzzer == 1)
{
						Buzzer_Start();
						STATE_Buzzer = 0;
  c2:	10 e0       	ldi	r17, 0x00	; 0
	uint8 STATE_Buzzer = 0;
	

		while ( data <= Num_Buzz )
{
					if ( STATE_Buzzer == 1)
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	29 f4       	brne	.+10     	; 0xd2 <Buzzer_Buzz_NUM_Times+0x1c>
{
						Buzzer_Start();
  c8:	0e 94 4f 00 	call	0x9e	; 0x9e <Buzzer_Start>
						STATE_Buzzer = 0;
						data++;
  cc:	cf 5f       	subi	r28, 0xFF	; 255
		while ( data <= Num_Buzz )
{
					if ( STATE_Buzzer == 1)
{
						Buzzer_Start();
						STATE_Buzzer = 0;
  ce:	81 2f       	mov	r24, r17
  d0:	05 c0       	rjmp	.+10     	; 0xdc <Buzzer_Buzz_NUM_Times+0x26>
						data++;
}
					
					else if (STATE_Buzzer == 0)
  d2:	81 11       	cpse	r24, r1
  d4:	03 c0       	rjmp	.+6      	; 0xdc <Buzzer_Buzz_NUM_Times+0x26>
{
						Buzzer_Stop();
  d6:	0e 94 55 00 	call	0xaa	; 0xaa <Buzzer_Stop>
						STATE_Buzzer = 1;
  da:	8d 2f       	mov	r24, r29
{
	uint8 data = 0;
	uint8 STATE_Buzzer = 0;
	

		while ( data <= Num_Buzz )
  dc:	c3 30       	cpi	r28, 0x03	; 3
  de:	90 f3       	brcs	.-28     	; 0xc4 <Buzzer_Buzz_NUM_Times+0xe>
}
		
		data = 0;
		

  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	1f 91       	pop	r17
  e6:	08 95       	ret

000000e8 <DIO_SetPinDir>:
		 case DIO_PORTC :
		 *Val = GET_BIT(PINC, Pin);
		 break;
		 
		 case DIO_PORTD :
		 *Val = GET_BIT(PIND, Pin);
  e8:	44 23       	and	r20, r20
  ea:	b9 f1       	breq	.+110    	; 0x15a <DIO_SetPinDir+0x72>
  ec:	41 30       	cpi	r20, 0x01	; 1
  ee:	09 f0       	breq	.+2      	; 0xf2 <DIO_SetPinDir+0xa>
  f0:	6b c0       	rjmp	.+214    	; 0x1c8 <DIO_SetPinDir+0xe0>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	89 f0       	breq	.+34     	; 0x118 <DIO_SetPinDir+0x30>
  f6:	28 f0       	brcs	.+10     	; 0x102 <DIO_SetPinDir+0x1a>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	c9 f0       	breq	.+50     	; 0x12e <DIO_SetPinDir+0x46>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	11 f1       	breq	.+68     	; 0x144 <DIO_SetPinDir+0x5c>
 100:	08 95       	ret
 102:	2a b3       	in	r18, 0x1a	; 26
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_SetPinDir+0x26>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_SetPinDir+0x22>
 112:	82 2b       	or	r24, r18
 114:	8a bb       	out	0x1a, r24	; 26
 116:	08 95       	ret
 118:	27 b3       	in	r18, 0x17	; 23
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_SetPinDir+0x3c>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_SetPinDir+0x38>
 128:	82 2b       	or	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	08 95       	ret
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDir+0x52>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDir+0x4e>
 13e:	82 2b       	or	r24, r18
 140:	84 bb       	out	0x14, r24	; 20
 142:	08 95       	ret
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPinDir+0x68>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPinDir+0x64>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	91 f0       	breq	.+36     	; 0x182 <DIO_SetPinDir+0x9a>
 15e:	28 f0       	brcs	.+10     	; 0x16a <DIO_SetPinDir+0x82>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	d9 f0       	breq	.+54     	; 0x19a <DIO_SetPinDir+0xb2>
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	29 f1       	breq	.+74     	; 0x1b2 <DIO_SetPinDir+0xca>
 168:	08 95       	ret
 16a:	2a b3       	in	r18, 0x1a	; 26
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_SetPinDir+0x8e>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_SetPinDir+0x8a>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	8a bb       	out	0x1a, r24	; 26
 180:	08 95       	ret
 182:	27 b3       	in	r18, 0x17	; 23
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_SetPinDir+0xa6>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_SetPinDir+0xa2>
 192:	80 95       	com	r24
 194:	82 23       	and	r24, r18
 196:	87 bb       	out	0x17, r24	; 23
 198:	08 95       	ret
 19a:	24 b3       	in	r18, 0x14	; 20
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_SetPinDir+0xbe>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_SetPinDir+0xba>
 1aa:	80 95       	com	r24
 1ac:	82 23       	and	r24, r18
 1ae:	84 bb       	out	0x14, r24	; 20
 1b0:	08 95       	ret
 1b2:	21 b3       	in	r18, 0x11	; 17
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_SetPinDir+0xd6>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_SetPinDir+0xd2>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	81 bb       	out	0x11, r24	; 17
 1c8:	08 95       	ret

000001ca <DIO_SetPinVal>:
 1ca:	44 23       	and	r20, r20
 1cc:	b9 f1       	breq	.+110    	; 0x23c <DIO_SetPinVal+0x72>
 1ce:	41 30       	cpi	r20, 0x01	; 1
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <DIO_SetPinVal+0xa>
 1d2:	6b c0       	rjmp	.+214    	; 0x2aa <DIO_SetPinVal+0xe0>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	89 f0       	breq	.+34     	; 0x1fa <DIO_SetPinVal+0x30>
 1d8:	28 f0       	brcs	.+10     	; 0x1e4 <DIO_SetPinVal+0x1a>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	c9 f0       	breq	.+50     	; 0x210 <DIO_SetPinVal+0x46>
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	11 f1       	breq	.+68     	; 0x226 <DIO_SetPinVal+0x5c>
 1e2:	08 95       	ret
 1e4:	2b b3       	in	r18, 0x1b	; 27
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_SetPinVal+0x26>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_SetPinVal+0x22>
 1f4:	82 2b       	or	r24, r18
 1f6:	8b bb       	out	0x1b, r24	; 27
 1f8:	08 95       	ret
 1fa:	28 b3       	in	r18, 0x18	; 24
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_SetPinVal+0x3c>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_SetPinVal+0x38>
 20a:	82 2b       	or	r24, r18
 20c:	88 bb       	out	0x18, r24	; 24
 20e:	08 95       	ret
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_SetPinVal+0x52>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_SetPinVal+0x4e>
 220:	82 2b       	or	r24, r18
 222:	85 bb       	out	0x15, r24	; 21
 224:	08 95       	ret
 226:	22 b3       	in	r18, 0x12	; 18
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SetPinVal+0x68>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_SetPinVal+0x64>
 236:	82 2b       	or	r24, r18
 238:	82 bb       	out	0x12, r24	; 18
 23a:	08 95       	ret
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	91 f0       	breq	.+36     	; 0x264 <DIO_SetPinVal+0x9a>
 240:	28 f0       	brcs	.+10     	; 0x24c <DIO_SetPinVal+0x82>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	d9 f0       	breq	.+54     	; 0x27c <DIO_SetPinVal+0xb2>
 246:	83 30       	cpi	r24, 0x03	; 3
 248:	29 f1       	breq	.+74     	; 0x294 <DIO_SetPinVal+0xca>
 24a:	08 95       	ret
 24c:	2b b3       	in	r18, 0x1b	; 27
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_SetPinVal+0x8e>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_SetPinVal+0x8a>
 25c:	80 95       	com	r24
 25e:	82 23       	and	r24, r18
 260:	8b bb       	out	0x1b, r24	; 27
 262:	08 95       	ret
 264:	28 b3       	in	r18, 0x18	; 24
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_SetPinVal+0xa6>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_SetPinVal+0xa2>
 274:	80 95       	com	r24
 276:	82 23       	and	r24, r18
 278:	88 bb       	out	0x18, r24	; 24
 27a:	08 95       	ret
 27c:	25 b3       	in	r18, 0x15	; 21
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_SetPinVal+0xbe>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_SetPinVal+0xba>
 28c:	80 95       	com	r24
 28e:	82 23       	and	r24, r18
 290:	85 bb       	out	0x15, r24	; 21
 292:	08 95       	ret
 294:	22 b3       	in	r18, 0x12	; 18
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_SetPinVal+0xd6>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_SetPinVal+0xd2>
 2a4:	80 95       	com	r24
 2a6:	82 23       	and	r24, r18
 2a8:	82 bb       	out	0x12, r24	; 18
 2aa:	08 95       	ret

000002ac <DIO_TogglePin>:
	 }
 }

 void DIO_TogglePin(uint8 Port , uint8 Pin )
 {
	 switch (Port)
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	89 f0       	breq	.+34     	; 0x2d2 <DIO_TogglePin+0x26>
 2b0:	28 f0       	brcs	.+10     	; 0x2bc <DIO_TogglePin+0x10>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	c9 f0       	breq	.+50     	; 0x2e8 <DIO_TogglePin+0x3c>
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	11 f1       	breq	.+68     	; 0x2fe <DIO_TogglePin+0x52>
 2ba:	08 95       	ret
	 {
		 case DIO_PORTA :
		Toggle_BIT(PORTA, Pin);
 2bc:	2b b3       	in	r18, 0x1b	; 27
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_TogglePin+0x1c>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_TogglePin+0x18>
 2cc:	82 27       	eor	r24, r18
 2ce:	8b bb       	out	0x1b, r24	; 27
		 break;
 2d0:	08 95       	ret
		 
		 case DIO_PORTB :
		 Toggle_BIT(PORTB, Pin);
 2d2:	28 b3       	in	r18, 0x18	; 24
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_TogglePin+0x32>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_TogglePin+0x2e>
 2e2:	82 27       	eor	r24, r18
 2e4:	88 bb       	out	0x18, r24	; 24
		 break;
 2e6:	08 95       	ret
		 
		 case DIO_PORTC :
		 Toggle_BIT(PORTC, Pin);
 2e8:	25 b3       	in	r18, 0x15	; 21
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_TogglePin+0x48>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_TogglePin+0x44>
 2f8:	82 27       	eor	r24, r18
 2fa:	85 bb       	out	0x15, r24	; 21
		 break;
 2fc:	08 95       	ret
		 
		 case DIO_PORTD :
		 Toggle_BIT(PORTD, Pin);
 2fe:	22 b3       	in	r18, 0x12	; 18
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_TogglePin+0x5e>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_TogglePin+0x5a>
 30e:	82 27       	eor	r24, r18
 310:	82 bb       	out	0x12, r24	; 18
 312:	08 95       	ret

00000314 <LCD_WriteCommand>:
{
	uint8 pos[2] = {0x80 , 0xC0};
		
		LCD_WriteCommand(pos[row]+col);
		
}
 314:	cf 93       	push	r28
 316:	c8 2f       	mov	r28, r24
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	63 e0       	ldi	r22, 0x03	; 3
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 336:	8b b3       	in	r24, 0x1b	; 27
 338:	9c 2f       	mov	r25, r28
 33a:	90 7f       	andi	r25, 0xF0	; 240
 33c:	8f 70       	andi	r24, 0x0F	; 15
 33e:	89 2b       	or	r24, r25
 340:	8b bb       	out	0x1b, r24	; 27
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	63 e0       	ldi	r22, 0x03	; 3
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 34c:	8f ec       	ldi	r24, 0xCF	; 207
 34e:	97 e0       	ldi	r25, 0x07	; 7
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCD_WriteCommand+0x3c>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_WriteCommand+0x42>
 356:	00 00       	nop
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	63 e0       	ldi	r22, 0x03	; 3
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 362:	2b b3       	in	r18, 0x1b	; 27
 364:	30 e1       	ldi	r19, 0x10	; 16
 366:	c3 9f       	mul	r28, r19
 368:	c0 01       	movw	r24, r0
 36a:	11 24       	eor	r1, r1
 36c:	92 2f       	mov	r25, r18
 36e:	9f 70       	andi	r25, 0x0F	; 15
 370:	89 2b       	or	r24, r25
 372:	8b bb       	out	0x1b, r24	; 27
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	63 e0       	ldi	r22, 0x03	; 3
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 37e:	8f ec       	ldi	r24, 0xCF	; 207
 380:	97 e0       	ldi	r25, 0x07	; 7
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_WriteCommand+0x6e>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_WriteCommand+0x74>
 388:	00 00       	nop
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	63 e0       	ldi	r22, 0x03	; 3
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 394:	8f e0       	ldi	r24, 0x0F	; 15
 396:	97 e2       	ldi	r25, 0x27	; 39
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <LCD_WriteCommand+0x84>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <LCD_WriteCommand+0x8a>
 39e:	00 00       	nop
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <LCD_Init>:
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	62 e0       	ldi	r22, 0x02	; 2
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	64 e0       	ldi	r22, 0x04	; 4
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	65 e0       	ldi	r22, 0x05	; 5
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	66 e0       	ldi	r22, 0x06	; 6
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	67 e0       	ldi	r22, 0x07	; 7
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
 3ea:	2f ef       	ldi	r18, 0xFF	; 255
 3ec:	80 e7       	ldi	r24, 0x70	; 112
 3ee:	92 e0       	ldi	r25, 0x02	; 2
 3f0:	21 50       	subi	r18, 0x01	; 1
 3f2:	80 40       	sbci	r24, 0x00	; 0
 3f4:	90 40       	sbci	r25, 0x00	; 0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <LCD_Init+0x4c>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_Init+0x56>
 3fa:	00 00       	nop
 3fc:	83 e3       	ldi	r24, 0x33	; 51
 3fe:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_WriteCommand>
 402:	82 e3       	ldi	r24, 0x32	; 50
 404:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_WriteCommand>
 408:	88 e2       	ldi	r24, 0x28	; 40
 40a:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_WriteCommand>
 40e:	8c e0       	ldi	r24, 0x0C	; 12
 410:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_WriteCommand>
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_WriteCommand>
 41a:	86 e0       	ldi	r24, 0x06	; 6
 41c:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_WriteCommand>
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_WriteCommand>
 426:	08 95       	ret

00000428 <LCD_WriteChar>:
 428:	cf 93       	push	r28
 42a:	c8 2f       	mov	r28, r24
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	62 e0       	ldi	r22, 0x02	; 2
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	63 e0       	ldi	r22, 0x03	; 3
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 44a:	8b b3       	in	r24, 0x1b	; 27
 44c:	9c 2f       	mov	r25, r28
 44e:	90 7f       	andi	r25, 0xF0	; 240
 450:	8f 70       	andi	r24, 0x0F	; 15
 452:	89 2b       	or	r24, r25
 454:	8b bb       	out	0x1b, r24	; 27
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	63 e0       	ldi	r22, 0x03	; 3
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 460:	8f ec       	ldi	r24, 0xCF	; 207
 462:	97 e0       	ldi	r25, 0x07	; 7
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <LCD_WriteChar+0x3c>
 468:	00 c0       	rjmp	.+0      	; 0x46a <LCD_WriteChar+0x42>
 46a:	00 00       	nop
 46c:	40 e0       	ldi	r20, 0x00	; 0
 46e:	63 e0       	ldi	r22, 0x03	; 3
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 476:	2b b3       	in	r18, 0x1b	; 27
 478:	30 e1       	ldi	r19, 0x10	; 16
 47a:	c3 9f       	mul	r28, r19
 47c:	c0 01       	movw	r24, r0
 47e:	11 24       	eor	r1, r1
 480:	92 2f       	mov	r25, r18
 482:	9f 70       	andi	r25, 0x0F	; 15
 484:	89 2b       	or	r24, r25
 486:	8b bb       	out	0x1b, r24	; 27
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	63 e0       	ldi	r22, 0x03	; 3
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 492:	8f ec       	ldi	r24, 0xCF	; 207
 494:	97 e0       	ldi	r25, 0x07	; 7
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <LCD_WriteChar+0x6e>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <LCD_WriteChar+0x74>
 49c:	00 00       	nop
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_SetPinVal>
 4a8:	8f e0       	ldi	r24, 0x0F	; 15
 4aa:	97 e2       	ldi	r25, 0x27	; 39
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <LCD_WriteChar+0x84>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <LCD_WriteChar+0x8a>
 4b2:	00 00       	nop
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <LCD_WriteString>:
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	fc 01       	movw	r30, r24
 4c0:	80 81       	ld	r24, Z
 4c2:	88 23       	and	r24, r24
 4c4:	59 f0       	breq	.+22     	; 0x4dc <LCD_WriteString+0x24>
 4c6:	8f 01       	movw	r16, r30
 4c8:	c0 e0       	ldi	r28, 0x00	; 0
 4ca:	0e 94 14 02 	call	0x428	; 0x428 <LCD_WriteChar>
 4ce:	cf 5f       	subi	r28, 0xFF	; 255
 4d0:	f8 01       	movw	r30, r16
 4d2:	ec 0f       	add	r30, r28
 4d4:	f1 1d       	adc	r31, r1
 4d6:	80 81       	ld	r24, Z
 4d8:	81 11       	cpse	r24, r1
 4da:	f7 cf       	rjmp	.-18     	; 0x4ca <LCD_WriteString+0x12>
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	08 95       	ret

000004e4 <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_WriteCommand(0X01);
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_WriteCommand>
 4ea:	08 95       	ret

000004ec <LED_Init>:
  YOU HAVE TO COPY THE DIO_SetPinDir & DIO_TogglePin FOR THE NUMBER THAT YOU WANT
  WITH CONSIDERING MACROS IN Project_cfg FILE AT LED_cfg */

void LED_Init(void)
{
	DIO_SetPinDir(LED_PORT , LED1_PIN ,DIO_PIN_OUTPUT); // SET DIRECTION OUTPUT OF LED 1 
 4ec:	41 e0       	ldi	r20, 0x01	; 1
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	83 e0       	ldi	r24, 0x03	; 3
 4f2:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
	DIO_SetPinDir(LED_PORT , LED2_PIN ,DIO_PIN_OUTPUT); // SET DIRECTION OUTPUT OF LED 2
 4f6:	41 e0       	ldi	r20, 0x01	; 1
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	83 e0       	ldi	r24, 0x03	; 3
 4fc:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
 500:	08 95       	ret

00000502 <LED_Toggle>:

}

void LED_Toggle(void)
{
	DIO_TogglePin(LED_PORT , LED1_PIN); // CONTROL LED 1 ON OR OFF
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_TogglePin>
	DIO_TogglePin(LED_PORT , LED2_PIN); // CONTROL LED 2 ON OR OFF
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_TogglePin>
 512:	08 95       	ret

00000514 <main>:
	uint8 any_data = 1;
	uint8 LED_STATE = 0;
	uint8 BUZZER_STATE = 0;
	
	
	SPI_Slave_Init();
 514:	0e 94 3a 03 	call	0x674	; 0x674 <SPI_Slave_Init>
	LCD_Init();
 518:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_Init>
	LED_Init();
 51c:	0e 94 76 02 	call	0x4ec	; 0x4ec <LED_Init>
	Buzzer_Init();
 520:	0e 94 49 00 	call	0x92	; 0x92 <Buzzer_Init>
	Timer0_Init();
 524:	0e 94 56 03 	call	0x6ac	; 0x6ac <Timer0_Init>
	Timer0_SetDelay(Disered_Time_Timer0);
 528:	68 eb       	ldi	r22, 0xB8	; 184
 52a:	7b e0       	ldi	r23, 0x0B	; 11
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 77 03 	call	0x6ee	; 0x6ee <Timer0_SetDelay>
int main(void)
{
	uint8 REC_DATA_SPI = 0;
	uint8 any_data = 1;
	uint8 LED_STATE = 0;
	uint8 BUZZER_STATE = 0;
 534:	d0 e0       	ldi	r29, 0x00	; 0

int main(void)
{
	uint8 REC_DATA_SPI = 0;
	uint8 any_data = 1;
	uint8 LED_STATE = 0;
 536:	c0 e0       	ldi	r28, 0x00	; 0
			else
			{
				LCD_Clear();
				LED_Toggle();
				LCD_WriteString("Led  OFF");
				LED_STATE = 0;
 538:	10 e0       	ldi	r17, 0x00	; 0
	
	

	while (1)
	{
		REC_DATA_SPI = SPI_Transiver(any_data);
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <SPI_Transiver>
		
		switch(REC_DATA_SPI)
 540:	82 33       	cpi	r24, 0x32	; 50
 542:	f9 f0       	breq	.+62     	; 0x582 <main+0x6e>
 544:	18 f4       	brcc	.+6      	; 0x54c <main+0x38>
 546:	81 33       	cpi	r24, 0x31	; 49
 548:	31 f0       	breq	.+12     	; 0x556 <main+0x42>
 54a:	f7 cf       	rjmp	.-18     	; 0x53a <main+0x26>
 54c:	83 33       	cpi	r24, 0x33	; 51
 54e:	79 f1       	breq	.+94     	; 0x5ae <main+0x9a>
 550:	84 33       	cpi	r24, 0x34	; 52
 552:	b1 f1       	breq	.+108    	; 0x5c0 <main+0xac>
 554:	f2 cf       	rjmp	.-28     	; 0x53a <main+0x26>
		{
			case '1' :
			if(LED_STATE == 0)
 556:	c1 11       	cpse	r28, r1
 558:	0a c0       	rjmp	.+20     	; 0x56e <main+0x5a>
			{
				LCD_Clear();
 55a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_Clear>
				LED_Toggle();
 55e:	0e 94 81 02 	call	0x502	; 0x502 <LED_Toggle>
				LCD_WriteString("Led  ON");
 562:	80 e6       	ldi	r24, 0x60	; 96
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_WriteString>
				LED_STATE = 1;
 56a:	c1 e0       	ldi	r28, 0x01	; 1
 56c:	e6 cf       	rjmp	.-52     	; 0x53a <main+0x26>
			}
			else
			{
				LCD_Clear();
 56e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_Clear>
				LED_Toggle();
 572:	0e 94 81 02 	call	0x502	; 0x502 <LED_Toggle>
				LCD_WriteString("Led  OFF");
 576:	88 e6       	ldi	r24, 0x68	; 104
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_WriteString>
				LED_STATE = 0;
 57e:	c1 2f       	mov	r28, r17
 580:	dc cf       	rjmp	.-72     	; 0x53a <main+0x26>
			}
			
			break;
			
			case '2' :
			if(BUZZER_STATE == 0)
 582:	d1 11       	cpse	r29, r1
 584:	0a c0       	rjmp	.+20     	; 0x59a <main+0x86>
			{
				LCD_Clear();
 586:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_Clear>
				Buzzer_Start();
 58a:	0e 94 4f 00 	call	0x9e	; 0x9e <Buzzer_Start>
				LCD_WriteString("BUZZER is ON");
 58e:	81 e7       	ldi	r24, 0x71	; 113
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_WriteString>
				BUZZER_STATE = 1;
 596:	d1 e0       	ldi	r29, 0x01	; 1
 598:	d0 cf       	rjmp	.-96     	; 0x53a <main+0x26>
			}
			else
			{
				LCD_Clear();
 59a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_Clear>
				Buzzer_Stop();
 59e:	0e 94 55 00 	call	0xaa	; 0xaa <Buzzer_Stop>
				LCD_WriteString("BUZZER is OFF");
 5a2:	8e e7       	ldi	r24, 0x7E	; 126
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_WriteString>
				BUZZER_STATE = 0;
 5aa:	d1 2f       	mov	r29, r17
 5ac:	c6 cf       	rjmp	.-116    	; 0x53a <main+0x26>
		    }
			
			break;
			
			case '3' :
			LCD_Clear();
 5ae:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_Clear>
			Timer0_Start();
 5b2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <Timer0_Start>
			LCD_WriteString("Timer is Start");
 5b6:	8c e8       	ldi	r24, 0x8C	; 140
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_WriteString>
			
			break;
 5be:	bd cf       	rjmp	.-134    	; 0x53a <main+0x26>
			
			case '4' :
			LCD_Clear();
 5c0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_Clear>
			Timer0_Stop();
 5c4:	0e 94 6d 03 	call	0x6da	; 0x6da <Timer0_Stop>
			LCD_WriteString("Timer is Stop");
 5c8:	8b e9       	ldi	r24, 0x9B	; 155
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_WriteString>
			
			break;	
 5d0:	b4 cf       	rjmp	.-152    	; 0x53a <main+0x26>

000005d2 <__vector_11>:




ISR (TIMER0_OVF_vect)
{
 5d2:	1f 92       	push	r1
 5d4:	0f 92       	push	r0
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	2f 93       	push	r18
 5de:	3f 93       	push	r19
 5e0:	4f 93       	push	r20
 5e2:	5f 93       	push	r21
 5e4:	6f 93       	push	r22
 5e6:	7f 93       	push	r23
 5e8:	8f 93       	push	r24
 5ea:	9f 93       	push	r25
 5ec:	af 93       	push	r26
 5ee:	bf 93       	push	r27
 5f0:	ef 93       	push	r30
 5f2:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 5f4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
 5f8:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__data_end+0x1>
 5fc:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <__data_end+0x2>
 600:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <__data_end+0x3>
 604:	01 96       	adiw	r24, 0x01	; 1
 606:	a1 1d       	adc	r26, r1
 608:	b1 1d       	adc	r27, r1
 60a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__data_end>
 60e:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__data_end+0x1>
 612:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <__data_end+0x2>
 616:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <__data_end+0x3>
	
	if (cnt == NUM_OVF)
 61a:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <NUM_OVF>
 61e:	50 91 b3 00 	lds	r21, 0x00B3	; 0x8000b3 <NUM_OVF+0x1>
 622:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <NUM_OVF+0x2>
 626:	70 91 b5 00 	lds	r23, 0x00B5	; 0x8000b5 <NUM_OVF+0x3>
 62a:	84 17       	cp	r24, r20
 62c:	95 07       	cpc	r25, r21
 62e:	a6 07       	cpc	r26, r22
 630:	b7 07       	cpc	r27, r23
 632:	79 f4       	brne	.+30     	; 0x652 <__vector_11+0x80>
	{
		LED_Toggle();
 634:	0e 94 81 02 	call	0x502	; 0x502 <LED_Toggle>
		Buzzer_Buzz_NUM_Times();
 638:	0e 94 5b 00 	call	0xb6	; 0xb6 <Buzzer_Buzz_NUM_Times>
		cnt = 0;
 63c:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
 640:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__data_end+0x1>
 644:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__data_end+0x2>
 648:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__data_end+0x3>
		TCNT0 = Init_value ;
 64c:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <Init_value>
 650:	82 bf       	out	0x32, r24	; 50
		
	}
	
	
}
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	bf 91       	pop	r27
 658:	af 91       	pop	r26
 65a:	9f 91       	pop	r25
 65c:	8f 91       	pop	r24
 65e:	7f 91       	pop	r23
 660:	6f 91       	pop	r22
 662:	5f 91       	pop	r21
 664:	4f 91       	pop	r20
 666:	3f 91       	pop	r19
 668:	2f 91       	pop	r18
 66a:	0f 90       	pop	r0
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	0f 90       	pop	r0
 670:	1f 90       	pop	r1
 672:	18 95       	reti

00000674 <SPI_Slave_Init>:
	DIO_SetPinVal(DIO_PORTB , DIO_PIN4 , DIO_PIN_LOW);
}

void SPI_Master_Ter_Trans(void)
{
	DIO_SetPinVal(DIO_PORTB , DIO_PIN4 , DIO_PIN_HIGH);
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	64 e0       	ldi	r22, 0x04	; 4
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
 67e:	40 e0       	ldi	r20, 0x00	; 0
 680:	65 e0       	ldi	r22, 0x05	; 5
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
 688:	41 e0       	ldi	r20, 0x01	; 1
 68a:	66 e0       	ldi	r22, 0x06	; 6
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
 692:	40 e0       	ldi	r20, 0x00	; 0
 694:	67 e0       	ldi	r22, 0x07	; 7
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
 69c:	80 e4       	ldi	r24, 0x40	; 64
 69e:	8d b9       	out	0x0d, r24	; 13
 6a0:	08 95       	ret

000006a2 <SPI_Transiver>:
}

uint8 SPI_Transiver(uint8 data)
{
	uint8 rec_data = 0;
	SPI->SPDR = data ;
 6a2:	8f b9       	out	0x0f, r24	; 15
	
	while(GET_BIT(SPI->SPSR, 7) == 0);
 6a4:	77 9b       	sbis	0x0e, 7	; 14
 6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <SPI_Transiver+0x2>
	
	rec_data = SPI->SPDR;
 6a8:	8f b1       	in	r24, 0x0f	; 15
	
	return rec_data;
	
}
 6aa:	08 95       	ret

000006ac <Timer0_Init>:


void Timer0_Init(void)
{
	/*select Normal mode*/
	CLR_BIT(TCCR0 , 3);
 6ac:	83 b7       	in	r24, 0x33	; 51
 6ae:	87 7f       	andi	r24, 0xF7	; 247
 6b0:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0 , 6);
 6b2:	83 b7       	in	r24, 0x33	; 51
 6b4:	8f 7b       	andi	r24, 0xBF	; 191
 6b6:	83 bf       	out	0x33, r24	; 51
	/*enable Interrupts*/
	SET_BIT(SREG , 7);  /* enable global interrupts*/
 6b8:	8f b7       	in	r24, 0x3f	; 63
 6ba:	80 68       	ori	r24, 0x80	; 128
 6bc:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(TIMSK , 0);  // enable Timer0 OVF Interrupts
 6be:	89 b7       	in	r24, 0x39	; 57
 6c0:	81 60       	ori	r24, 0x01	; 1
 6c2:	89 bf       	out	0x39, r24	; 57
 6c4:	08 95       	ret

000006c6 <Timer0_Start>:
}

void Timer0_Start(void)
{
	SET_BIT(TCCR0 , 0);
 6c6:	83 b7       	in	r24, 0x33	; 51
 6c8:	81 60       	ori	r24, 0x01	; 1
 6ca:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0 , 1);
 6cc:	83 b7       	in	r24, 0x33	; 51
 6ce:	8d 7f       	andi	r24, 0xFD	; 253
 6d0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0 , 2);
 6d2:	83 b7       	in	r24, 0x33	; 51
 6d4:	84 60       	ori	r24, 0x04	; 4
 6d6:	83 bf       	out	0x33, r24	; 51
 6d8:	08 95       	ret

000006da <Timer0_Stop>:
}

void Timer0_Stop(void)
{
	CLR_BIT(TCCR0 , 0);
 6da:	83 b7       	in	r24, 0x33	; 51
 6dc:	8e 7f       	andi	r24, 0xFE	; 254
 6de:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0 , 1);
 6e0:	83 b7       	in	r24, 0x33	; 51
 6e2:	8d 7f       	andi	r24, 0xFD	; 253
 6e4:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0 , 2);
 6e6:	83 b7       	in	r24, 0x33	; 51
 6e8:	8b 7f       	andi	r24, 0xFB	; 251
 6ea:	83 bf       	out	0x33, r24	; 51
 6ec:	08 95       	ret

000006ee <Timer0_SetDelay>:
}

void Timer0_SetDelay(uint32 Delay_ms )
{
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	9b 01       	movw	r18, r22
 6f4:	ac 01       	movw	r20, r24
	uint8 Tick_Time = (1024 / Freq );
	
	uint32 Total_Tick = (Delay_ms * 1000 ) / Tick_Time ;
 6f6:	a8 ee       	ldi	r26, 0xE8	; 232
 6f8:	b3 e0       	ldi	r27, 0x03	; 3
 6fa:	0e 94 c3 03 	call	0x786	; 0x786 <__muluhisi3>
	
	NUM_OVF = Total_Tick / 256 ;
 6fe:	8b 01       	movw	r16, r22
 700:	9c 01       	movw	r18, r24
 702:	0f 2e       	mov	r0, r31
 704:	ff e0       	ldi	r31, 0x0F	; 15
 706:	36 95       	lsr	r19
 708:	27 95       	ror	r18
 70a:	17 95       	ror	r17
 70c:	07 95       	ror	r16
 70e:	fa 95       	dec	r31
 710:	d1 f7       	brne	.-12     	; 0x706 <Timer0_SetDelay+0x18>
 712:	f0 2d       	mov	r31, r0
 714:	00 93 b2 00 	sts	0x00B2, r16	; 0x8000b2 <NUM_OVF>
 718:	10 93 b3 00 	sts	0x00B3, r17	; 0x8000b3 <NUM_OVF+0x1>
 71c:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <NUM_OVF+0x2>
 720:	30 93 b5 00 	sts	0x00B5, r19	; 0x8000b5 <NUM_OVF+0x3>
	
	Init_value = 256 - (Total_Tick %256 );
 724:	ab 01       	movw	r20, r22
 726:	bc 01       	movw	r22, r24
 728:	68 94       	set
 72a:	16 f8       	bld	r1, 6
 72c:	76 95       	lsr	r23
 72e:	67 95       	ror	r22
 730:	57 95       	ror	r21
 732:	47 95       	ror	r20
 734:	16 94       	lsr	r1
 736:	d1 f7       	brne	.-12     	; 0x72c <Timer0_SetDelay+0x3e>
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	a0 e0       	ldi	r26, 0x00	; 0
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	84 1b       	sub	r24, r20
 742:	91 09       	sbc	r25, r1
 744:	a1 09       	sbc	r26, r1
 746:	b1 09       	sbc	r27, r1
 748:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <Init_value>
 74c:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <Init_value+0x1>
 750:	a0 93 b0 00 	sts	0x00B0, r26	; 0x8000b0 <Init_value+0x2>
 754:	b0 93 b1 00 	sts	0x00B1, r27	; 0x8000b1 <Init_value+0x3>
	
	TCNT0 = Init_value ;
 758:	82 bf       	out	0x32, r24	; 50
	
	NUM_OVF++;
 75a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <NUM_OVF>
 75e:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <NUM_OVF+0x1>
 762:	a0 91 b4 00 	lds	r26, 0x00B4	; 0x8000b4 <NUM_OVF+0x2>
 766:	b0 91 b5 00 	lds	r27, 0x00B5	; 0x8000b5 <NUM_OVF+0x3>
 76a:	01 96       	adiw	r24, 0x01	; 1
 76c:	a1 1d       	adc	r26, r1
 76e:	b1 1d       	adc	r27, r1
 770:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <NUM_OVF>
 774:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <NUM_OVF+0x1>
 778:	a0 93 b4 00 	sts	0x00B4, r26	; 0x8000b4 <NUM_OVF+0x2>
 77c:	b0 93 b5 00 	sts	0x00B5, r27	; 0x8000b5 <NUM_OVF+0x3>
	
	 
}
 780:	1f 91       	pop	r17
 782:	0f 91       	pop	r16
 784:	08 95       	ret

00000786 <__muluhisi3>:
 786:	0e 94 ce 03 	call	0x79c	; 0x79c <__umulhisi3>
 78a:	a5 9f       	mul	r26, r21
 78c:	90 0d       	add	r25, r0
 78e:	b4 9f       	mul	r27, r20
 790:	90 0d       	add	r25, r0
 792:	a4 9f       	mul	r26, r20
 794:	80 0d       	add	r24, r0
 796:	91 1d       	adc	r25, r1
 798:	11 24       	eor	r1, r1
 79a:	08 95       	ret

0000079c <__umulhisi3>:
 79c:	a2 9f       	mul	r26, r18
 79e:	b0 01       	movw	r22, r0
 7a0:	b3 9f       	mul	r27, r19
 7a2:	c0 01       	movw	r24, r0
 7a4:	a3 9f       	mul	r26, r19
 7a6:	70 0d       	add	r23, r0
 7a8:	81 1d       	adc	r24, r1
 7aa:	11 24       	eor	r1, r1
 7ac:	91 1d       	adc	r25, r1
 7ae:	b2 9f       	mul	r27, r18
 7b0:	70 0d       	add	r23, r0
 7b2:	81 1d       	adc	r24, r1
 7b4:	11 24       	eor	r1, r1
 7b6:	91 1d       	adc	r25, r1
 7b8:	08 95       	ret

000007ba <_exit>:
 7ba:	f8 94       	cli

000007bc <__stop_program>:
 7bc:	ff cf       	rjmp	.-2      	; 0x7bc <__stop_program>
